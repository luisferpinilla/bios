import pandas as pdimport numpy as npfrom utils.asignador_capacidad import AsignadorCapacidadfrom tqdm import tqdmfrom datetime import datetime, timedeltadef _generar_dataframe(matriz:list)->pd.DataFrame:    fixed_columns = ['planta', 'ingrediente', 'variable']    df = pd.DataFrame(matriz).fillna(0.0)            per = [x for x in df.drop(columns=fixed_columns).columns]    per = sorted(per)        sorted_colums = fixed_columns + per    df = df.groupby(fixed_columns)[per].sum().reset_index()    df =  df[sorted_colums]        df. sort_values(fixed_columns, inplace=True)        return dfdef __leer_archivo(bios_input_file:str)->dict:        print('Leyendo archivo')        # Leer el archivo de excel    sheets = ['ingredientes', 'plantas', 'safety_stock', 'consumo_proyectado', 'tto_puerto',              'tto_plantas', 'inventario_puerto',              'costos_almacenamiento_cargas', 'costos_operacion_portuaria',              'fletes_cop_per_kg', 'venta_entre_empresas']    data_frames = dict()        asignador = AsignadorCapacidad(bios_input_file)    data_frames['unidades_almacenamiento_df'] = asignador.obtener_unidades_almacenamiento()    for sheet in tqdm(sheets):        data_frames[sheet] = pd.read_excel(            io=bios_input_file, sheet_name=sheet)    return data_frames      def __generar_periodos(dataframes:pd.DataFrame)->list():        print('generando periodos')        consumo_df = dataframes['consumo_proyectado'].copy()            periodos = [datetime.strptime(x, '%d/%m/%Y') for x in consumo_df.drop(columns=['planta', 'ingrediente']).columns]        return periodos  def __generar_consumo(dataframes:pd.DataFrame, periodos:list)->list():        print('generando consumo')        matriz=list()        consumo_df = dataframes['consumo_proyectado'].copy()        renamers = {x:datetime.strptime(x, '%d/%m/%Y') for x in consumo_df.drop(columns=['planta', 'ingrediente']).columns}        consumo_df.rename(columns=renamers, inplace=True)        consumo_df = consumo_df.groupby(['planta', 'ingrediente'])[periodos].sum().reset_index()    for i in tqdm(consumo_df.index):        dato = dict()                dato['planta'] = consumo_df.loc[i]['planta']        dato['ingrediente'] = consumo_df.loc[i]['ingrediente']        dato['variable'] = 'consumo'                for periodo in periodos:            dato[periodo] = consumo_df.loc[i][periodo]                     matriz.append(dato)            return matrizdef __generar_capacidad_almacenamiento(matriz:list, periodos:list, dataframes:pd.DataFrame):        print('trabajando con unidades de almacenamiento')        unidades_almacenamiento_df = dataframes['unidades_almacenamiento_df'].copy()    unidades_almacenamiento_df['capacidad_max'] = unidades_almacenamiento_df.apply(lambda x: x[x['ingrediente_actual']], axis=1)    unidades_almacenamiento_df = unidades_almacenamiento_df.groupby(['planta', 'ingrediente_actual'])[['cantidad_actual', 'capacidad_max']].sum().reset_index()    for i in tqdm(unidades_almacenamiento_df.index):                # Incluir capacidad        dato = dict()                dato['planta'] = unidades_almacenamiento_df.loc[i]['planta']        dato['ingrediente'] = unidades_almacenamiento_df.loc[i]['ingrediente_actual']        dato['variable'] = 'capacidad_max'                for periodo in periodos:            dato[periodo] = unidades_almacenamiento_df.loc[i]['capacidad_max']                     matriz.append(dato)                # Agregar inventario inicial        dato = dict()                dato['planta'] = unidades_almacenamiento_df.loc[i]['planta']        dato['ingrediente'] = unidades_almacenamiento_df.loc[i]['ingrediente_actual']        dato['variable'] = 'inventario'                periodo_anterior = periodos[0] - timedelta(days=1)                dato[periodo_anterior] = unidades_almacenamiento_df.loc[i]['cantidad_actual']                matriz.append(dato)        def __generar_llegadas_ya_planeadas(matriz:list, periodos:list, dataframes:pd.DataFrame):        print('trabajando con llegadas planeadas a planta')        tto_plantas = dataframes['tto_plantas'].copy()    tto_plantas = tto_plantas.groupby(['planta', 'ingrediente', 'fecha_llegada'])[['cantidad']].sum().reset_index()    for i in tqdm(tto_plantas.index):                dato=dict()                dato['planta'] = tto_plantas.loc[i]['planta']        dato['ingrediente'] = tto_plantas.loc[i]['ingrediente']        dato['variable'] = 'llegadas_planeadas'                periodo = tto_plantas.loc[i]['fecha_llegada']        dato[periodo] = tto_plantas.loc[i]['cantidad']                if periodo in periodos:            matriz.append(dato)def __generar_safety_stock(matriz:list, periodos:list, dataframes:pd.DataFrame):        print('trabajando con safety stock en planta')        safety_stock = dataframes['safety_stock'].copy()        consumo_proyectado = dataframes['consumo_proyectado'].copy()        renamers = {x:datetime.strptime(x, '%d/%m/%Y') for x in consumo_proyectado.drop(columns=['planta', 'ingrediente']).columns}        consumo_proyectado.rename(columns=renamers, inplace=True)        for i in tqdm(safety_stock.index):        planta = safety_stock.loc[i]['planta']        ingrediente = safety_stock.loc[i]['ingrediente']        dias_ss = int(safety_stock.loc[i]['dias_ss'])        consumo = consumo_proyectado[(consumo_proyectado['planta']==planta)&(consumo_proyectado['ingrediente']==ingrediente)]                if consumo.shape[0]>0:                    for periodo in periodos:                                periodo_inicial = list(consumo.columns).index(periodo)                periodo_final = periodo + timedelta(days=dias_ss)                                if periodo_final in list(consumo.columns):                    ss_kg = np.sum(consumo.iloc[0][periodo_inicial:list(consumo.columns).index(periodo_final)])                                else:                    ss_kg = np.mean(consumo.iloc[0][periodo_inicial:])*dias_ss                            dato = dict()                                dato['planta'] = planta                dato['ingrediente'] = ingrediente                dato['variable'] = 'safety_stock'                dato[periodo] = ss_kg                                matriz.append(dato)def __completar_inventario(matriz:list):        print('calculando inventarios')        df = _generar_dataframe(matriz)        fixed_columns = ['planta', 'ingrediente', 'variable']    per = [x for x in df.drop(columns=fixed_columns).columns]        per = sorted(per)        # Llenar el inventario inicial    plantas = list(df['planta'].unique())        ingredientes = list(df['ingrediente'].unique())         for planta in tqdm(plantas):        for ingrediente in ingredientes:                                    consumo = df[(df['planta']==planta)&(df['ingrediente']==ingrediente)&(df['variable']=='consumo')].copy()            llegadas_planeadas = df[(df['planta']==planta)&(df['ingrediente']==ingrediente)&(df['variable']=='llegadas_planeadas')].copy()            inventario = df[(df['planta']==planta)&(df['ingrediente']==ingrediente)&(df['variable']=='inventario')].copy()                        # Si hay datos de inventario vas a calcula los inventarios en el tiempo            if inventario.shape[0]>0:                inventario_t = inventario.iloc[0][per[0]]                            for periodo in per[1:]:                                        if consumo.shape[0]>0:                        consumo_t = consumo.iloc[0][periodo]                    else:                        consumo_t = 0.0                                            if llegadas_planeadas.shape[0]>0:                        llegadas_t = llegadas_planeadas.iloc[0][periodo]                    else:                        llegadas_t = 0.0                                          inventario_t = inventario_t + llegadas_t - consumo_t                                        if inventario_t >= 0:                        backorder_t = 0.0                    else:                        backorder_t = -1*inventario_t                        inventario_t = 0.0                                                                dato = {                            'planta':planta,                            'ingrediente':ingrediente,                            'variable':'inventario',                            periodo: inventario_t                        }                    matriz.append(dato)                                        dato = {                            'planta':planta,                            'ingrediente':ingrediente,                            'variable':'backorder',                            periodo: backorder_t                        }                                        matriz.append(dato)                        else: # Si no tienes inventarios, vas a llenar inventarios en el tiempo en cero.                for periodo in per:                                        dato = {                            'planta':planta,                            'ingrediente':ingrediente,                            'variable':'inventario',                            periodo: 0.0                        }                    matriz.append(dato)                                        dato = {                            'planta':planta,                            'ingrediente':ingrediente,                            'variable':'backorder',                            periodo: 0.0                        }                                        matriz.append(dato)                    def validar_capacidad_almacenamiento(df:pd.DataFrame, periodos:list):        df = df[df['variable'].isin(['consumo', 'capacidad_max', 'safety_stock'])].copy()        id_vars = ['planta', 'ingrediente', 'variable']        value_vars = list(df.drop(columns=id_vars).columns)        df = df.melt(id_vars=id_vars, value_vars=value_vars, var_name='periodo', value_name='valor').copy()    df = df[df['periodo'].isin(periodos)]        df = df.pivot_table(index=['planta', 'ingrediente', 'periodo'], columns='variable', values='valor')    df = df.groupby(['planta', 'ingrediente']).agg({'capacidad_max':'mean', 'consumo':'mean', 'safety_stock': 'mean'}).fillna(0.0)                df['camiones_consumo'] = df['consumo'].apply(lambda x: 34000/x if x > 0.0 else 0.0)            def validate(x):                validaciones = list()                consumo = x['consumo']        capacidad = x['capacidad_max']        safety_stock = x['safety_stock']        consumo_total = consumo*len(periodos)                                if consumo < 0 and safety_stock > 0:             validaciones.append(('bajo','se ha definido safety stock en días con consumos de 0'))                if consumo > 0 and capacidad <= 0:             validaciones.append(('alto','existen consumos definidos pero no existe capacidad de almacenamiento'))                if consumo > 0:            if capacidad < safety_stock + 34000:                validaciones.append(('alto','La capacidad definida y el SS no permiten recibir al menos un camiones'))                return validaciones        df['validaciones'] = df.apply(validate, axis=1)        def obtener_matriz_plantas(bios_input_file:str)->pd.DataFrame:        dataframes = __leer_archivo(bios_input_file=bios_input_file)        periodos = __generar_periodos(dataframes)        matriz = __generar_consumo(dataframes, periodos)        __generar_capacidad_almacenamiento(matriz, periodos, dataframes)        __generar_llegadas_ya_planeadas(matriz, periodos, dataframes)        __generar_safety_stock(matriz, periodos, dataframes)        __completar_inventario(matriz)        df = _generar_dataframe(matriz)        return df          if __name__ == '__main__':        bios_input_file = 'data/0_model_template_2204.xlsm'        obtener_matriz_plantas(bios_input_file)        print('finalizado')                